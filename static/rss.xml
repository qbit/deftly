<?xml version="1.0" encoding="UTF-8"?><rss version="2.0">
  <channel>
    <title>deftly.net - All posts</title>
    <link>https://deftly.net/</link>
    <description>Personal blog of Aaron Bieber</description>
    <copyright>This work is copyright © Aaron Bieber</copyright>
    <managingEditor>aaron@bolddaemon.com (Aaron Bieber)</managingEditor>
    <pubDate>Fri, 29 Dec 2017 08:00:00 -0700</pubDate>
    <item>
      <title>Passing off the Complexity</title>
      <link>https://deftly.net/posts/2017-12-29-passing-off-the-hard-parts.html</link>
      <description>&lt;h1&gt;The Password Dilemma&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;For quite some time I was a user of KeePass. Life was great I had a&#xA;client that worked on every platform (OpenBSD via &lt;code&gt;mono&lt;/code&gt;, Android and&#xA;iOS via 3rd party apps). Every now and then I would manually copy the&#xA;file from my &amp;ldquo;main&amp;rdquo; machine to all the others.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After a while the syncing process became tedious. I attempted to find&#xA;things that would aid in the process.. Tools like &lt;code&gt;syncthing&lt;/code&gt;,&#xA;&lt;code&gt;unison&lt;/code&gt;, dropbox.. etc. They all had issues. With &lt;code&gt;syncthing&lt;/code&gt; the&#xA;synchronizing was unreliable. Most of the time it couldn&amp;rsquo;t find other&#xA;hosts on my network.. and when it finally did I would end up needing&#xA;to tell it how to resolve conflicts. Dropbox didn&amp;rsquo;t have a native&#xA;client for OpenBSD - not to mention putting your password database&#xA;online is a terrifying proposition (my main issue with LastPass)!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Out of all the management methods I tried - LastPass was the most&#xA;&amp;ldquo;complete&amp;rdquo;:&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Name&lt;/th&gt;&#xA;&lt;th&gt;Syncing&lt;/th&gt;&#xA;&lt;th&gt;Browser&lt;/th&gt;&#xA;&lt;th&gt;OpenBSD&lt;/th&gt;&#xA;&lt;th&gt;iOS/Android&lt;/th&gt;&#xA;&lt;th&gt;My Trust&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;LastPass&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✗&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;KeePass&lt;/td&gt;&#xA;&lt;td&gt;✗&lt;/td&gt;&#xA;&lt;td&gt;✗&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Password-Gorilla&lt;/td&gt;&#xA;&lt;td&gt;✗&lt;/td&gt;&#xA;&lt;td&gt;✗&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;h1&gt;Enter pass&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; is touted as &amp;ldquo;the standard Unix password manager&amp;rdquo;. It works&#xA;by keeping your passwords in individual PGP encrypted files. For&#xA;example, the entry &lt;code&gt;Web/google.com&lt;/code&gt; would hold my &amp;ldquo;google.com&amp;rdquo;&#xA;password. An entry can contain more than just your passwords (I&#xA;have &lt;code&gt;username: ....&lt;/code&gt; set on the 2nd line.), the first line&#xA;is always expected to be the password.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Out of the box, pass supports syncing via git, multiple recipients&#xA;(meaning it can encrypt a password file for multiple people),&#xA;random password generation and copying to clipboard with&#xA;auto-clear!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It doesn&amp;rsquo;t, however, work out of the box on iOS/Android or my&#xA;browser. Fortunately for me - pass has a fantastic ecosystem&#xA;with a multitude of 3rd party browser extensions, iOS/Android apps.. best&#xA;all, they are open source! There are even full replacements for&#xA;pass itself! One such replacements is &lt;a href=&#34;https://github.com/justwatchcom/gopass&#34;&gt;gopass&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;gopass&lt;/code&gt; extends pass a bit further, it&amp;rsquo;s written in Go,&#xA;seamlessly supports multiple &amp;ldquo;stores&amp;rdquo; (allowing me to have an&#xA;extra level of privledge separation for sensitive passwords),&#xA;is pledge()&amp;rsquo;d, AND can run on every OS I use!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For browsers, I have settled on &lt;a href=&#34;https://github.com/dannyvankooten/browserpass&#34;&gt;browserpass&lt;/a&gt;. It&amp;rsquo;s also written&#xA;in Go, pledge()&amp;rsquo;d, works on all my systems* (OpenBSD, Windows,&#xA;macos), has auto-fill and easy to grok source code!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For iOS/Android there are &lt;a href=&#34;https://github.com/mssun/passforios&#34;&gt;passforios&lt;/a&gt; and &lt;a href=&#34;https://github.com/zeapo/Android-Password-Store&#34;&gt;Android-Password-Store&lt;/a&gt;. All of which support&#xA;syncing via git!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Couple all this together and I get:&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Name&lt;/th&gt;&#xA;&lt;th&gt;Syncing&lt;/th&gt;&#xA;&lt;th&gt;Browser&lt;/th&gt;&#xA;&lt;th&gt;OpenBSD&lt;/th&gt;&#xA;&lt;th&gt;iOS/Android&lt;/th&gt;&#xA;&lt;th&gt;My Trust&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;gopass/browserpass/mobile app&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;td&gt;✓&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;h1&gt;A few hurdles&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;Key management&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;PGP key management was an initial hurdle for me. Having to copy keys&#xA;from one computer to another put me back in the same situation I had&#xA;with KeePass.. syncing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My solution to this problem is to store my PGP keys on a SmartCard&#xA;(Yubikey 4 in this case). This lets me &amp;ldquo;transfer&amp;rdquo; my PGP key between my&#xA;main computers without issue. It also has the added advantage of&#xA;giving me an ssh key I can use on less trusted machines!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For me, the Yubikey is ideal because of the form factor, however,&#xA;there are other alternatives such as NitroKey.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Remote access&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Because pass and friends sync by way of git, you must expose your git&#xA;repo to be able to use the sync mechanism. I didn&amp;rsquo;t want to expose my&#xA;main repo to the world (even though it is only available via ssh), so&#xA;it is only accessible via my home network.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have an ssh key per device, and use the &lt;code&gt;command=&lt;/code&gt; option in&#xA;&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; to force git-only ssh access to less trusted&#xA;devices.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, my phone is less trusted than my OpenBSD laptop, so I&#xA;have an entry like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;command=&amp;quot;git-shell -c \&amp;quot;$SSH_ORIGINAL_COMMAND\&amp;quot;&amp;quot;,no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty ssh-rsa ........ dumbdevice&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This limits the device &lt;code&gt;dumbdevice&lt;/code&gt; to only executing &lt;code&gt;git-shell&lt;/code&gt;!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;All things considered, this setup takes a little bit to configure&#xA;initially (with keys and git repos.. etc), but its advantages&#xA;out weigh that hurdle for me:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;It&amp;rsquo;s very simple. No databases, no extra exposed services.. etc.&lt;/li&gt;&#xA;&lt;li&gt;It uses existing tools to manage / sync my passwords. I trust ssh way&#xA;more than I trust a web server!&lt;/li&gt;&#xA;&lt;li&gt;The ecosystem is very active.&lt;/li&gt;&#xA;&lt;li&gt;If need be, I can operate entirely without the &amp;ldquo;pass&amp;rdquo; tools via&#xA;something like:&#xA;&lt;code&gt;gpg -d ~/.password-store/Web/google.com | head -n1 | xclip&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;* Currently there is a bug in Firefox on OpenBSD that prevents&#xA;native extensions from functioning.. I hope to get this fixed&#xA;soon! Chromium works fine, however.&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Fri, 29 Dec 2017 08:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Using cabal on OpenBSD</title>
      <link>https://deftly.net/posts/2017-10-12-using-cabal-on-openbsd.html</link>
      <description>&lt;p&gt;Since &lt;a href=&#34;https://undeadly.org/cgi?action=article&amp;amp;sid=20160527203200&#34;&gt;W^X became&#xA;mandatory&lt;/a&gt;&#xA;in OpenBSD, W^X&amp;rsquo;d binaries are only allowed to be executed from&#xA;designated locations (mount points). If you used the auto partition&#xA;layout during install, your &lt;code&gt;/usr/local/&lt;/code&gt; will be mounted with&#xA;&lt;code&gt;wxallowed&lt;/code&gt;. For example, here is the entry for my current machine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/dev/sd2g on /usr/local type ffs (local, nodev, wxallowed, softdep)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is a great feature, but if you build applications outside of the&#xA;&lt;code&gt;wxallowed&lt;/code&gt; partition, you are going to run into some issues,&#xA;especially in the case of &lt;code&gt;cabal&lt;/code&gt; (python as well).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is an example of what you would see when attempting to do &lt;code&gt;cabal&#xA;install pandoc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;qbit@slip[1]:~λ cabal update&#xA;Config file path source is default config file.&#xA;Config file /home/qbit/.cabal/config not found.&#xA;Writing default configuration to /home/qbit/.cabal/config&#xA;Downloading the latest package list from hackage.haskell.org&#xA;qbit@slip[0]:~λ cabal install pandoc&#xA;Resolving dependencies...&#xA;.....&#xA;cabal: user error (Error: some packages failed to install:&#xA;JuicyPixels-3.2.8.3 failed during the configure step. The exception was:&#xA;/home/qbit/.cabal/setup-exe-cache/setup-Simple-Cabal-1.22.5.0-x86_64-openbsd-ghc-7.10.3: runProcess: runInteractiveProcess: exec: permission denied (Permission denied)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The error isn&amp;rsquo;t actually what it says. The untrained eye would assume&#xA;permissions issue. A quick check of &lt;code&gt;dmesg&lt;/code&gt; reveals what is really&#xA;happening:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/home/qbit/.cabal/setup-exe-cache/setup-Simple-Cabal-1.22.5.0-x86_64-openbsd-ghc-7.10.3(22924): W^X binary outside wxallowed mountpoint&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;OpenBSD is killing the above binary because it is violating W^X and&#xA;hasn&amp;rsquo;t been safely kept in its &lt;code&gt;/usr/local&lt;/code&gt; corral!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We could solve this problem quickly by marking our &lt;code&gt;/home&lt;/code&gt; as&#xA;&lt;code&gt;wxallowed&lt;/code&gt;, however, this would be heavy handed and reckless (we&#xA;don&amp;rsquo;t want to allow other potentially unsafe binaries to&#xA;execute.. just the cabal stuff).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, we will build all our cabal stuff in &lt;code&gt;/usr/local&lt;/code&gt; by using&#xA;a symlink!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;doas mkdir -p /usr/local/{cabal,cabal/build} # make our cabal and build dirs&#xA;doas chown -R user:wheel /usr/local/cabal    # set perms&#xA;rm -rf ~/.cabal                              # kill the old non-working cabal&#xA;ln -s /usr/local/cabal ~/.cabal              # link it!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We are almost there! Some cabal packages build outside of&#xA;&lt;code&gt;~/.cabal&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cabal install hakyll&#xA;.....&#xA;Building foundation-0.0.14...                                                   Preprocessing library foundation-0.0.14...&#xA;hsc2hs: dist/build/Foundation/System/Bindings/Posix_hsc_make: runProcess: runInteractiveProcess: exec: permission denied (Permission denied)&#xA;Downloading time-locale-compat-0.1.1.3...&#xA;.....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Fortunately, all of the packages I have come across that do this all&#xA;respect the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;alias cabal=&#39;env TMPDIR=/usr/local/cabal/build/ cabal&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this alias, you should be able to cabal without issue (so far&#xA;pandoc, shellcheck and hakyll have all built fine)!&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;h2&gt;TL;DR&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# This assumes /usr/local/ is mounted as wxallowed.&#xA;#&#xA;doas mkdir -p /usr/local/{cabal,cabal/build}&#xA;doas chown -R user:wheel /usr/local/cabal&#xA;rm -rf ~/.cabal&#xA;ln -s /usr/local/cabal ~/.cabal&#xA;alias cabal=&#39;env TMPDIR=/usr/local/cabal/build/ cabal&#39;&#xA;cabal install pandoc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Tue, 12 Sep 2017 16:35:00 -0600</pubDate>
    </item>
    <item>
      <title>Measuring the weight of an electron</title>
      <link>https://deftly.net/posts/2017-06-01-measuring-the-weight-of-an-electron.html</link>
      <description>&lt;p&gt;I am going to &amp;ldquo;&lt;strong&gt;Measure the weight of an electron&lt;/strong&gt;&amp;rdquo;! By &amp;ldquo;weight&amp;rdquo;, I&#xA;mean what it takes to make&#xA;&lt;a href=&#34;https://github.com/electron/electron&#34;&gt;Electron&lt;/a&gt; work on OpenBSD.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;This is a long rant. A rant intended to document lunacy,&#xA; hopefully aid others in the future and make myself fell better about&#xA; something I think is crazy. It may seem like I am making an enemy of electron,&#xA; but keep in mind that isn&amp;rsquo;t my intention! The enemy here, is complexity!&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My friend Henry, a canary, is coming along for the ride!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Getting the tools&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;At first glance Electron seems like a pretty solid app, it has decent&#xA;&lt;a href=&#34;https://github.com/electron/electron/tree/master/docs&#34;&gt;docs&lt;/a&gt;, it&amp;rsquo;s&#xA;consolidated in a single repository, has a lot of&#xA;&lt;a href=&#34;https://github.com/electron/electron/stargazers&#34;&gt;visibility&lt;/a&gt;, porting&#xA;it shouldn&amp;rsquo;t be a big deal, right?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First things first, clone that repo!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:electron/electron.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to follow along, we will be using the &lt;a href=&#34;https://github.com/electron/electron/blob/master/docs/development/build-instructions-linux.md&#34;&gt;build instructions&#xA;for&#xA;linux&lt;/a&gt;&#xA;doc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Reading through the doc, right off the bat there are a few interesting&#xA;things:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;At least 25GB disk space&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Huh, OK, some how this ~47M repository is going to blow up to 25G? &lt;strong&gt;&lt;em&gt;I&#xA;glance at Henry, he gives me the &amp;ldquo;what?&amp;rdquo; look. We carry on.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clang 3.4 or later.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This one isn&amp;rsquo;t odd until we have more context. &lt;em&gt;More on this one later.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Continuing along with the build, I know I have two versions of &lt;code&gt;clang&lt;/code&gt;&#xA;installed on OpenBSD, one from ports and one in base. Hopefully I will&#xA;be able to tell the build to use one of these versions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Indeed Electron has that&#xA;&lt;a href=&#34;https://github.com/electron/electron/blob/master/docs/development/build-instructions-linux.md#using-system-clang-instead-of-downloaded-clang-binaries&#34;&gt;ability&lt;/a&gt;!&#xA;Their example is even using the same prefix OpenBSD&amp;rsquo;s clang port!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;So, we run the bootstrap:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;./script/bootstrap.py -v --clang_dir /usr/local&#xA;Traceback (most recent call last):&#xA;  File &amp;quot;./script/bootstrap.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;&#xA;    from lib.config import BASE_URL, PLATFORM,  enable_verbose_mode, \&#xA;  File &amp;quot;/home/qbit/dev/electron_wut/script/lib/config.py&amp;quot;, line 17, in &amp;lt;module&amp;gt;&#xA;    }[sys.platform]&#xA;KeyError: &#39;openbsd6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Dang. Looks like we need to tell bootstrap about OpenBSD. Easy enough:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;diff --git a/script/lib/config.py b/script/lib/config.py&#xA;index 58f467b5b..646af08f7 100644&#xA;--- a/script/lib/config.py&#xA;+++ b/script/lib/config.py&#xA;@@ -14,6 +14,7 @@ PLATFORM = {&#xA;   &#39;darwin&#39;: &#39;darwin&#39;,&#xA;   &#39;linux2&#39;: &#39;linux&#39;,&#xA;   &#39;win32&#39;: &#39;win32&#39;,&#xA;+  &#39;openbsd6&#39;: &#39;openbsd&#39;,&#xA; }[sys.platform]&#xA;&#xA; verbose_mode = False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We re-run the bootstrap, things seem to be going well.. &lt;strong&gt;&lt;em&gt;Then the&#xA; Henry squeaks: &amp;ldquo;whoa!!&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Synchronizing submodule url for &#39;vendor/requests&#39;&#xA;git submodule update --init --recursive&#xA;Cloning into &#39;/home/qbit/dev/electron_wut/vendor/boto&#39;...&#xA;error: object c1eddff4ee3f62b6039f1083651b9118883e7f07: badTimezone: invalid author/committer line - bad time zone&#xA;fatal: Error in object&#xA;fatal: index-pack failed&#xA;fatal: clone of &#39;https://github.com/boto/boto.git&#39; into submodule path &#39;/home/qbit/dev/electron_wut/vendor/boto&#39; failed&#xA;Failed to clone &#39;vendor/boto&#39;. Retry scheduled&#xA;Cloning into &#39;/home/qbit/dev/electron_wut/vendor/breakpad&#39;...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We just failed to clone the &lt;code&gt;boto&lt;/code&gt; repo, but the build is still&#xA;going.. does this mean it was an optional dependency and isn&amp;rsquo;t needed&#xA;for the build?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Henry doesn&amp;rsquo;t look happy, none the less, he assures me it&amp;rsquo;s OK to go&#xA; on. What a trooper!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Cloning into &#39;/home/qbit/dev/electron_wut/vendor/requests&#39;...&#xA;error: object 5e6ecdad9f69b1ff789a17733b8edc6fd7091bd8: badTimezone: invalid author/committer line - bad time zone&#xA;fatal: Error in object&#xA;fatal: index-pack failed&#xA;fatal: clone of &#39;https://github.com/kennethreitz/requests&#39; into submodule path &#39;/home/qbit/dev/electron_wut/vendor/requests&#39; failed&#xA;Failed to clone &#39;vendor/requests&#39;. Retry scheduled&#xA;Cloning into &#39;/home/qbit/dev/electron_wut/vendor/boto&#39;...&#xA;error: object c1eddff4ee3f62b6039f1083651b9118883e7f07: badTimezone: invalid author/committer line - bad time zone&#xA;fatal: Error in object&#xA;fatal: index-pack failed&#xA;fatal: clone of &#39;https://github.com/boto/boto.git&#39; into submodule path &#39;/home/qbit/dev/electron_wut/vendor/boto&#39; failed&#xA;Failed to clone &#39;vendor/boto&#39; a second time, aborting&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Wait. Another repository failed to clone? At least this time the build&#xA;failed after trying to clone &lt;code&gt;boto&lt;/code&gt;.. again. I am guessing it tried&#xA;twice because something might have changed between now and the last&#xA;clone? &lt;strong&gt;&lt;em&gt;Off in the distance we catch a familiar tune, it almost sounds&#xA;like Gnarls Barkley&amp;rsquo;s song Crazy, can&amp;rsquo;t tell for sure.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As it turns out, if you are using&#xA;&lt;a href=&#34;https://git-scm.com/docs/git-fsck&#34;&gt;git-fsck&lt;/a&gt;, you are unable to&#xA;clone &lt;a href=&#34;https://github.com/boto/boto/issues/3507&#34;&gt;boto&lt;/a&gt; and&#xA;&lt;a href=&#34;https://github.com/requests/requests/issues/3805&#34;&gt;requests&lt;/a&gt;. Obviously&#xA;the proper fix for his is to not care about the validity of the git&#xA;objects!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we die a little inside and comment out &lt;code&gt;fsckobjects&lt;/code&gt; in our&#xA;&lt;code&gt;~/.gitconfig&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;I look at Henry, he assures me it&amp;rsquo;s safe to go on.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We re-run bootstrap&amp;hellip; thousands of lines fly past.. &amp;ldquo;&lt;code&gt;npm&#xA;verb... something something&lt;/code&gt;&amp;rdquo;. I can only think npm is puking this&#xA;info for it&amp;rsquo;s on benefit. It definitely isn&amp;rsquo;t for ours!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bah, another error:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;subprocess.CalledProcessError: Command &#39;[&#39;/usr/local/bin/python&#39;, &#39;/home/qbit/dev/electron_wut/vendor/libchromiumcontent/script/download&#39;, &#39;-s&#39;, &#39;-f&#39;, &#39;-c&#39;, &#39;94c58176db175d72d88621afe8223b4175eecba5&#39;, &#39;--target_arch&#39;, &#39;x64&#39;, &#39;https://s3.amazonaws.com/github-janky-artifacts/libchromiumcontent&#39;, &#39;/home/qbit/dev/electron_wut/vendor/download/libchromiumcontent&#39;]&#39; returned non-zero exit status 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks like it&amp;rsquo;s trying to download a pre-built &lt;code&gt;libchromiumcontent&lt;/code&gt;,&#xA;we reference the doc again, finding the &lt;code&gt;--build_libchromiumcontent&lt;/code&gt;&#xA;option. Re-run!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This time we are faced with &lt;code&gt;.&lt;/code&gt;&amp;rsquo;s, I have no idea what is happening:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/usr/local/bin/python /home/qbit/dev/electron_wut/vendor/libchromiumcontent/script/update -t x64 --defines  make_clang_dir=/usr/local clang_use_chrome_plugins=0&#xA;.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looking in &lt;code&gt;top&lt;/code&gt;, we can see a python process with a WAIT of &lt;code&gt;netio&lt;/code&gt;,&#xA;maybe it&amp;rsquo;s downloading something? Looking in the &lt;code&gt;electron_wut&lt;/code&gt;&#xA;directory reveals a growing file named&#xA;&lt;code&gt;chromium-58.0.3029.110.tar.xz&lt;/code&gt;. We let it finish downloading.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Out of curiosity we look at &lt;code&gt;vendor/libchromiumcontent/script/update&lt;/code&gt;,&#xA;it seems its purpose is to download / extract chromium clang and node,&#xA;good thing we already specified &lt;code&gt;--clang_dir&lt;/code&gt; or it might try to build&#xA;clang again!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;544 dots and 45 minutes later, we have an error! The&#xA;&lt;code&gt;chromium-58.0.3029.110.tar.xz&lt;/code&gt; file is mysteriously not there&#xA;anymore.. Interesting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Scrolling up in the terminal points us to something disheartening:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Extracting...&#xA;Updating Clang to 296320-1...&#xA;Creating directory /home/qbit/dev/electron_wut/vendor/libchromiumcontent/src/third_party/llvm-build&#xA;Traceback (most recent call last):&#xA;File &amp;quot;/home/qbit/dev/electron_wut/vendor/libchromiumcontent/src/tools/clang/scripts/update.py&amp;quot;, line 902, in &amp;lt;module&amp;gt;&#xA;    sys.exit(main())&#xA;    File &amp;quot;/home/qbit/dev/electron_wut/vendor/libchromiumcontent/src/tools/clang/scripts/update.py&amp;quot;, line 898, in main return UpdateClang(args)&#xA;    File &amp;quot;/home/qbit/dev/electron_wut/vendor/libchromiumcontent/src/tools/clang/scripts/update.py&amp;quot;, line 420, in UpdateClangi assert sys.platform.startswith(&#39;linux&#39;)&#xA;AssertionError&#xA;None&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Wut. &amp;ldquo;&lt;strong&gt;Updating Clang&amp;hellip;&lt;/strong&gt;&amp;rdquo;. Didn&amp;rsquo;t I explicitly say &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; to&#xA;build clang?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At this point we have to shift projects, no longer are we working on&#xA;Electron.. It&amp;rsquo;s &lt;code&gt;libchromiumcontent&lt;/code&gt; that needs our attention.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Fixing sub-tools&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:electron/libchromiumcontent.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Following the&#xA;&lt;a href=&#34;https://github.com/electron/libchromiumcontent&#34;&gt;instructions&lt;/a&gt; on this&#xA;repo, we run &lt;code&gt;script/bootstrap&lt;/code&gt;.. it seems to complete without issue!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On to the next steps:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;script/update -t x64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ahh, our old friends the dots! This is the second time waiting 45+&#xA;minutes for a 500+ MB file to download. We are fairly confident it&#xA;will fail, delete the file out from under itself and hinder the&#xA;process even further, so we add an explicit exit to the &lt;code&gt;update&lt;/code&gt;&#xA;script. This way we can copy the file somewhere safe!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;diff --git a/script/update b/script/update&#xA;index 234e4b3..b2639bf 100755&#xA;--- a/script/update&#xA;+++ b/script/update&#xA;@@ -107,6 +107,7 @@ def download_source_tarball(version):&#xA;         sys.stderr.flush()&#xA;         t.write(chunk)&#xA;&#xA;+  sys.exit()&#xA;   sys.stderr.write(&#39;\nExtracting...\n&#39;)&#xA;   sys.stderr.flush()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;544 dots and 43 minutes later&amp;hellip;. &lt;code&gt;chromium-58.0.3029.110.tar.xz&lt;/code&gt; is&#xA;safe!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Fool me once&amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mkdir safe_space&#xA;cp chromium-58.0.3029.110.tar.xz safe_space/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We remove the &lt;code&gt;sys.exit()&lt;/code&gt; and re-run! Wut.. dots again!? Lets look&#xA;deeper into this &lt;code&gt;update&lt;/code&gt; script:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if not args.no_download:&#xA;  version = chromium_version()&#xA;  if not is_source_tarball_updated(version):&#xA;    download_source_tarball(version)&#xA;else:&#xA;  print &amp;quot;Skipping Chromium Source Tarball Download&amp;quot;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ok, lets try that.. We copy the tar.xz out of its safe_space&amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Skipping Chromium Source Tarball Download&#xA;Traceback (most recent call last):&#xA;  File &amp;quot;/home/qbit/dev/libchromiumcontent/vendor/python-patch/patch.py&amp;quot;, line 1136, in &amp;lt;module&amp;gt;&#xA;    patch.apply(options.strip, root=options.directory) or sys.exit(-1)&#xA;  File &amp;quot;/home/qbit/dev/libchromiumcontent/vendor/python-patch/patch.py&amp;quot;, line 778, in apply&#xA;    os.chdir(root)&#xA;OSError: [Errno 2] No such file or directory: &#39;/home/qbit/dev/libchromiumcontent/src/.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sigh. The above (or similar) was repeated about 50 times&amp;hellip; The trend&#xA;here seems to be: &lt;strong&gt;Ignore errors! They are stupid and meaningless&#xA;anyway!&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since &lt;code&gt;def download_source_tarball&lt;/code&gt; should actually be &lt;code&gt;def&#xA;download_source_tarball_then_extract&lt;/code&gt;, we do that part for&#xA;it&amp;hellip; and pat ourselves on the back for having a &lt;code&gt;safe_space&lt;/code&gt;!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;As chromium extracts, Henry and I can&amp;rsquo;t shake the feeling that&#xA; everything until now was just the tip of the iceberg&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We remove the call to &lt;code&gt;update_clang&lt;/code&gt;, because.. well.. we have two&#xA;copies of it already and the Electron doc said everything would be fine&#xA;if we had &amp;gt;= clang 3.4!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Re-run..&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;already patched  third_party/WebKit/Source/core/paint/ThemePainterMac.mm&#xA;already patched  third_party/WebKit/Source/platform/mac/KillRingMac.mm&#xA;qbit@slip[1]:libchromiumcontent[master *%=]λ&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That &lt;code&gt;[1]&lt;/code&gt; in my PS1 means that the update script exited with the&#xA;return code &lt;code&gt;1&lt;/code&gt;&amp;hellip; but there is no indication of why..&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Henry&amp;rsquo;s lovely yellow plumage seems to be becoming a darker shade of&#xA; yellow.. How much more of this can we take?!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If we have learned anything so far, it has to be &amp;ldquo;errors don&amp;rsquo;t matter!&amp;rdquo;.&#xA;This one, however, warrants further investigation!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;We dig deeper into script/update&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;update_gn()&lt;/code&gt;.. pulls down a binary &lt;code&gt;gn&lt;/code&gt;.. which, interestingly, can&#xA;be generated with the code we have right below our feet&amp;hellip; but for&#xA;some reason, they have this component already built. There is no&#xA;pre-built version for OpenBSD.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At this point, Henry and I are getting pretty irritated.. it&amp;rsquo;s time to&#xA;bring in some big guns! We are going to leverage the countless hours&#xA;of work that have already been put into properly building these&#xA;components! (novel, right?!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We quickly move to &lt;code&gt;/usr/ports/www/chromium&lt;/code&gt;, low and behold, it&amp;rsquo;s the&#xA;&lt;em&gt;exact&lt;/em&gt; version that &lt;code&gt;libchromiumcontent&lt;/code&gt; is trying to build! We&#xA;review the &lt;code&gt;Makefile&lt;/code&gt; to find this gem: &lt;code&gt;2. bootstrap gn, the tool to&#xA;generate ninja files&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Running &lt;code&gt;make configure&lt;/code&gt; quickly gets us a usable &lt;code&gt;gn&lt;/code&gt; binary, we make&#xA;the appropriate directories under src/buildtools, copy &lt;code&gt;gn&lt;/code&gt; in, modify&#xA;our &lt;code&gt;script/update&lt;/code&gt; file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;diff --git a/script/update b/script/update&#xA;index 234e4b3..b5c4afc 100755&#xA;--- a/script/update&#xA;+++ b/script/update&#xA;@@ -52,9 +52,9 @@ def main():&#xA;&#xA;   return (apply_patches() or&#xA;           copy_chromiumcontent_files() or&#xA;-          update_clang() or&#xA;-          update_gn() or&#xA;-          update_node() or&#xA;+          #update_clang() or&#xA;+          #update_gn() or&#xA;+          #update_node() or&#xA;           run_gn(target_arch, args.defines))&#xA;&#xA;&#xA;@@ -248,6 +248,8 @@ def run_gn(target_arch, defines):&#xA;     gn = os.path.join(SRC_DIR, &#39;buildtools&#39;, &#39;linux64&#39;, &#39;gn&#39;)&#xA;   elif sys.platform == &#39;darwin&#39;:&#xA;     gn = os.path.join(SRC_DIR, &#39;buildtools&#39;, &#39;mac&#39;, &#39;gn&#39;)&#xA;+  elif sys.platform == &#39;openbsd6&#39;:&#xA;+    gn = os.path.join(SRC_DIR, &#39;buildtools&#39;, &#39;openbsd&#39;, &#39;gn&#39;)&#xA;&#xA;   env = os.environ.copy()&#xA;   if sys.platform in [&#39;win32&#39;, &#39;cygwin&#39;]:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Re-run!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ERROR at //build/config/sysroot.gni:95:5: Assertion failed.&#xA;    assert(&#xA;    ^-----&#xA;Missing sysroot (//build/linux/debian_wheezy_amd64-sysroot). To fix, run: build/linux/sysroot_scripts/install-sysroot.py --arch=amd64&#xA;See //build/config/sysroot.gni:96:9:&#xA;        exec_script(&amp;quot;//build/dir_exists.py&amp;quot;,&#xA;        ^-----------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Wheezy?! Where is that getting set?! &lt;strong&gt;&lt;em&gt;We stop and ponder.. how the&#xA;hell did we get here? What could have possibly warranted abandoning&#xA;makefiles and shell scripts in favor of this monstrosity!?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just for fun..  lets try to run the second step (after all, the first&#xA;step only produced a &lt;code&gt;1&lt;/code&gt;, right!?)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;script/build -t x64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;FML:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;qbit@slip[1]:libchromiumcontent[master *%=]λ script/build -t x64&#xA;Unsupported OS OpenBSD&#xA;No prebuilt ninja binary was found for this system.&#xA;Try building your own binary by doing:&#xA;  cd ~&#xA;  git clone https://github.com/martine/ninja.git -b v1.7.2&#xA;  cd ninja &amp;amp;&amp;amp; ./configure.py --bootstrap&#xA;Then add ~/ninja/ to your PATH.&#xA;Traceback (most recent call last):&#xA;  File &amp;quot;script/build&amp;quot;, line 57, in &amp;lt;module&amp;gt;&#xA;    sys.exit(main())&#xA;  File &amp;quot;script/build&amp;quot;, line 43, in main&#xA;    subprocess.check_call([NINJA, &#39;-C&#39;, os.path.relpath(out_dir), target], env=env)&#xA;  File &amp;quot;/usr/local/lib/python2.7/subprocess.py&amp;quot;, line 186, in check_call&#xA;    raise CalledProcessError(retcode, cmd)&#xA;subprocess.CalledProcessError: Command &#39;[&#39;/home/qbit/dev/libchromiumcontent/vendor/depot_tools/ninja&#39;, &#39;-C&#39;, &#39;src/out-x64/static_library&#39;, &#39;chromiumcontent:chromiumcontent&#39;]&#39; returned non-zero exit status 1&#xA;qbit@slip[1]:libchromiumcontent[master *%=]λ which ninja&#xA;/usr/local/bin/ninja&#xA;qbit@slip[0]:libchromiumcontent[master *%=]λ&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Clearly we are dealing with a beast that is too smart for its own&#xA;good.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Fixing sub-sub-tools&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Since &lt;code&gt;depot_tools&lt;/code&gt; is a Google project, it&amp;rsquo;s easier to edit the files&#xA;in the &lt;code&gt;vendor&lt;/code&gt; directory and pretend nothing ever happened.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;diff --git a/ninja b/ninja&#xA;index 282cc276..e22cbb9a 100755&#xA;--- a/ninja&#xA;+++ b/ninja&#xA;@@ -37,7 +37,5 @@ case &amp;quot;$OS&amp;quot; in&#xA;   Darwin)    exec &amp;quot;${THIS_DIR}/ninja-mac&amp;quot; &amp;quot;$@&amp;quot;;;&#xA;   CYGWIN*)   exec cmd.exe /c $(cygpath -t windows $0).exe &amp;quot;$@&amp;quot;;;&#xA;   MINGW*)    cmd.exe //c $0.exe &amp;quot;$@&amp;quot;;;&#xA;-  *)         echo &amp;quot;Unsupported OS ${OS}&amp;quot;&#xA;-             print_help&#xA;-             exit 1;;&#xA;+  *)         exec &amp;quot;/usr/local/bin/ninja&amp;quot; &amp;quot;$@&amp;quot;;;&#xA; esac&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sigh. So many assumptions, lets continue the trend!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd ../../&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Re-run &lt;code&gt;script/build -t x64&lt;/code&gt;&amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;No luck. At this point we are faced with a complex web of python&#xA;scripts that execute &lt;code&gt;gn&lt;/code&gt; on GN files to produce ninja files&amp;hellip; which&#xA;then build the various components and somewhere in that cluster,&#xA;something doesn&amp;rsquo;t know about OpenBSD&amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;I look at Henry, he is looking a photo of his wife and kids. They&#xA;   are sitting on a telephone wire, the morning sun illuminating their&#xA;   beautiful faces. Henry looks back at me and says &amp;ldquo;It&amp;rsquo;s not worth&#xA;   it.&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;We slam the laptop shut and go outside.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Thu, 01 Jun 2017 08:18:00 -0600</pubDate>
    </item>
    <item>
      <title>Tab completion in OpenBSD&#39;s ksh</title>
      <link>https://deftly.net/posts/2017-05-01-openbsd-ksh-tab-complete.html</link>
      <description>&lt;h1&gt;OpenBSD&amp;rsquo;s ksh&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;..is the little shell that could. In ~20k lines of code, it has many&#xA;of the same features as more popular shells like zsh and bash. Plus it&#xA;has the added bonus of being &lt;a href=&#34;http://man.openbsd.org/pledge&#34;&gt;pledge(2)&amp;rsquo;d&lt;/a&gt;!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the features OpenBSD&amp;rsquo;s ksh shares with its more popular&#xA;friends is user definable completions! Something that sets it apart,&#xA;however, is the simplicity of these completions. From the man page:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Custom completions may be configured by creating an array named&#xA;‘complete_command’, optionally suffixed with an argument number&#xA;to complete only for a single argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example, here is a completion for&#xA;&lt;a href=&#34;http://man.openbsd.org/vmctl&#34;&gt;vmctl(8)&lt;/a&gt; with expansion of defined VM&#xA;names:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# vmctl&#xA;set -A complete_vmctl -- console load reload start stop reset status&#xA;set -A complete_vmctl_2 -- $(vmctl status | awk &#39;!/NAME/{print $NF}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hats off to Nicholas Marriott nicm@ for implementing it and to&#xA;brynet@ for pointing it out to me! I was close to switching to&#xA;&lt;a href=&#34;https://fishshell.org&#34;&gt;fish&lt;/a&gt; in an attempt to save my wrists.. but&#xA;the ~180k lines of extra (yeah, on top of the 20k!) code in fish was&#xA;kinda scaring me!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For anyone interested, here is a quick comparison of CLOC for a few&#xA;popular shells:&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th align=&#34;left&#34;&gt;Shell&lt;/th&gt;&#xA;&lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt;&#xA;&lt;th align=&#34;right&#34;&gt;Total Lines (cloc)&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td align=&#34;left&#34;&gt;ksh&lt;/td&gt;&#xA;&lt;td align=&#34;left&#34;&gt;Mon May  1 07:17:54 UTC 2017&lt;/td&gt;&#xA;&lt;td align=&#34;right&#34;&gt;19680&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td align=&#34;left&#34;&gt;zsh&lt;/td&gt;&#xA;&lt;td align=&#34;left&#34;&gt;5.3.1&lt;/td&gt;&#xA;&lt;td align=&#34;right&#34;&gt;127246&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td align=&#34;left&#34;&gt;fish&lt;/td&gt;&#xA;&lt;td align=&#34;left&#34;&gt;2.5.0&lt;/td&gt;&#xA;&lt;td align=&#34;right&#34;&gt;207597&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt;&#xA;&lt;td align=&#34;left&#34;&gt;4.4&lt;/td&gt;&#xA;&lt;td align=&#34;right&#34;&gt;351043&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;p&gt;I understand LOC isn&amp;rsquo;t a good measure of quality, but it sure does&#xA;mean you have a lot more reading to find that quality!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A full list of my completions can be found &lt;a href=&#34;https://github.com/qbit/dotfiles/blob/master/common/dot_ksh_completions&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Mon, 01 May 2017 18:18:00 -0600</pubDate>
    </item>
    <item>
      <title>SSH Fingerprint Verification via Tor</title>
      <link>https://deftly.net/posts/2017-02-27-ssh-fp-verification-using-tor.html</link>
      <description>&lt;h1&gt;The Problem&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;OpenSSH (really, are there any other implementations?) requires &lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34;&gt;Trust&#xA;on First Use&lt;/a&gt; for&#xA;fingerprint verification.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Verification can be especially problematic when using remote services&#xA;like VPS or colocation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can you trust that the initial connection isn&amp;rsquo;t being &lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;Man In The&#xA;Middle&amp;rsquo;d&lt;/a&gt;?&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;My Solution&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;.. for remote hosts, is to use Tor as supplemental&#xA;verification. Fortunately OpenSSH makes this very easy as connections&#xA;can be proxied (&lt;code&gt;ProxyCommand&lt;/code&gt;) via arbitrary commands (&lt;code&gt;socat&lt;/code&gt; in&#xA;this case).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&#xA;# To make use of this, you need:&#xA;# - Tor installed / running&#xA;# - socat installed&#xA;# - Line 1 of your ~/.ssh/config should have: &#39;Include ~/.ssh/torify&#39;&#xA;&#xA;if [ $# -lt 1 ];then&#xA;        echo &amp;quot;Please specify hostname to check!&amp;quot;&#xA;        exit 1;&#xA;fi&#xA;&#xA;TFILE=~/.ssh/torify&#xA;HOST=$1&#xA;&#xA;CONF=$(cat &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;Host *&#xA;        ProxyCommand socat STDIO SOCKS4A:localhost:%h:%p,socksport=9050&#xA;EOF&#xA;);&#xA;&#xA;echo &amp;quot;$CONF&amp;quot; &amp;gt; &amp;quot;${TFILE}&amp;quot;&#xA;IP=$(tor-resolve &amp;quot;${HOST}&amp;quot;)&#xA;for i in 1 2 3 4 5; do&#xA;        ssh &amp;quot;${IP}&amp;quot; &amp;amp; sleep 3; kill $!&#xA;done&#xA;&#xA;echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;${TFILE}&amp;quot;&#xA;ssh &amp;quot;$HOST&amp;quot; &amp;amp; sleep 3; kill $!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Latest version of this script can be pulled from&#xA;&lt;a href=&#34;https://github.com/qbit/dotfiles/blob/master/bin/verify_ssh_fp&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The above script makes five cut-short ssh connections (waiting 3&#xA;seconds before cutting the connection by killing the ssh pid) to an IP&#xA;address that is resolved using Tor. It then makes a single non-Tor&amp;rsquo;d&#xA;cut-short connection to print the fingerprint as seen from your&#xA;default outbound connection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If all six of the output fingerprints match, it&amp;rsquo;s a bit more safe to&#xA;assume that your connection to the remote host isn&amp;rsquo;t being tampered&#xA;with!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obviously, this solution isn&amp;rsquo;t 100%. Your Tor connection could be&#xA;compromised.. Snakes could be on planes&amp;hellip; etc. So use it at your own risk.&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Mon, 27 Feb 2017 09:30:00 -0700</pubDate>
    </item>
    <item>
      <title>Why I Run OpenBSD</title>
      <link>https://deftly.net/posts/2016-05-31-why-i-run-openbsd.html</link>
      <description>&lt;p&gt;This post is about my journey down the OS rabbit hole and how it&#xA;landed me in OpenBSD land as a happy and productive user.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It contains information that is highly opinionated, wildly&#xA;inaccurate, mostly speculation. It is, after all, on the internet!&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;UPI&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;One thing I learned during my travels between OSs: consistency is&#xA;everything.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most operating systems seem to, at least, keep a consistent interface&#xA;between themselves and binaries / applications. They do this by keeping&#xA;consistent APIs (Application Programming Interfaces) and ABIs&#xA;(Application Binary Interfaces). If you take a binary from a really old&#xA;version of Linux and run or build it on a brand-spanking new install of&#xA;Linux, it will likely &lt;em&gt;Just Work™&lt;/em&gt;. This is great for applications&#xA;and developers of applications. Vendors can build binaries for&#xA;distribution and worry less about their product working when it gets&#xA;out in the wild (sure this binary built in 2016 will run on RedHat&#xA;AS2.1!!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With all this catering to applications and developers, one would think&#xA;that a similar level of attention would be applied to the &lt;em&gt;users&lt;/em&gt; of&#xA;the applications and systems: User Program Interfaces (UPI) as I like to&#xA;call them!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A good example of a poor UPI is (was?) &lt;code&gt;ifconfig(8)&lt;/code&gt; on Linux. From a&#xA;user&amp;rsquo;s perspective, &lt;code&gt;ifconfig&lt;/code&gt;, a command to &amp;ldquo;configure network&#xA;interface parameters&amp;rdquo; should work on&amp;hellip; well, network interfaces!&#xA;This includes wireless, hard-wired, cell based&amp;hellip; etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On Linux, however, this is no longer the case (at least for some devices).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This inconsistency seems to have come to be when Linux started getting&#xA;wireless support. For some reason someone (vendors, maybe?) decided&#xA;that &lt;code&gt;ifconfig&lt;/code&gt; wasn&amp;rsquo;t a good place to let users interact with their&#xA;wireless device. Maybe they felt their device was special? Maybe there&#xA;were technical reasons? The bottom line is, someone decided to create&#xA;a new utility to manage a wireless device&amp;hellip; and then another one came&#xA;along&amp;hellip; pretty soon there was &lt;code&gt;iwconfig(8)&lt;/code&gt;, &lt;code&gt;iw(8)&lt;/code&gt;, &lt;code&gt;ifconfig(8)&lt;/code&gt;,&#xA;some funky thing that let windows drivers interface with Linux..  and&#xA;one called &lt;code&gt;ip(8)&lt;/code&gt; I am sure there are others I am forgetting, but I&#xA;prefer to forget. I have moved onto greener pastures and the knowledge&#xA;of these programs no longer serves me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simply configuring a wireless network on Linux became a huge hassle:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;: Which tool do I use to configure my wireless? &lt;code&gt;ifconfig&lt;/code&gt;&#xA;doesn&amp;rsquo;t seem to be able to help me.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Google[1]&lt;/strong&gt;: Well it depends on what driver you are using.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;: Intel blablablbla.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Google[1] -&amp;gt; Intel Site&lt;/strong&gt;: &lt;code&gt;iwconfig&lt;/code&gt;! The command is going to look&#xA;very similar to &lt;code&gt;ifconfig&lt;/code&gt; but don&amp;rsquo;t let that fool you! It&amp;rsquo;s very&#xA;different and only works with one very specific type of wireless&#xA;device!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt; Note, the use of google here. This is very crucial, and the&#xA;very first sign of poor UPI, if the user has to go somewhere outside&#xA;the system to find information on the system, you have already lost.&#xA;Your UPI sucks.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;The Double Drill Set&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;All of this inconsistency with the wireless stuff left me with a&#xA;dirty, uneasay feeling. Where else is this disregard for users&#xA;manifesting? Is there no process that looks at tooling and says:&#xA;&amp;ldquo;Wait, these tools do very similar things from a users&#xA;perspective. Let&amp;rsquo;s not clutter the environment with more tools that do&#xA;&lt;em&gt;almost&lt;/em&gt; the same thing.&amp;rdquo;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s like having two drills, one that drives screws in, and another&#xA;that take them out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe none of this is Linux (the kernel)&amp;rsquo;s fault, maybe it&amp;rsquo;s because&#xA;userland is built over here by these people&amp;hellip; and the kernel over&#xA;there by those people. Perhaps it&amp;rsquo;s the job of a distributor like&#xA;Debian or RedHat to keep things consistent for the end user. I don&amp;rsquo;t&#xA;really know, but at this point, it didn&amp;rsquo;t seem like it&amp;rsquo;s a high&#xA;priority for any of them.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Back and Forth&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Throughout my OS travels, I have consistently gone back and forth&#xA;between Linux and the BSDs. At least yearly, I would have FreeBSD,&#xA;OpenBSD or NetBSD on my main system. Usually this would end after a few&#xA;months because one tiny thing that worked in Linux was missing. Be it&#xA;an application or a driver.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But then something changed. I decided that I had enough of this dirty&#xA;feeling. I was going to abandon Linux and use one of the BSDs full&#xA;time. If something didn&amp;rsquo;t work, I was going to fix it. If I didn&amp;rsquo;t&#xA;have an application I needed, I was going to port it. But I didn&amp;rsquo;t&#xA;know which BSD to choose. All of them had issues with at least one&#xA;thing I needed, so all were candidates for adoption!&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;The Showdown&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;One month, one BSD. Starting with FreeBSD, then OpenBSD, then NetBSD.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since none of the BSDs completely worked for me, I knew it would be a&#xA;tough journey. There would be sacrifices, there would be work that&#xA;needed to be done.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A few things were clear:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) If I found myself googling for information that the system should&#xA;have provided, that system was not the one for me.&#xA;2) If the system had glaring UPI violations, it wasn&amp;rsquo;t the system for me.&#xA;3) If system simplicity was created via overly complex mechanisms, the&#xA;system was not for me.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Long Story Short&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;OpenBSD won the showdown. It was the most complete, simple, and&#xA;coherent system. The documentation was thorough, the code was easy to&#xA;follow and understand.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It had one command to configure all of the network interfaces!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I didn&amp;rsquo;t have wireless, but I was able to find a cheap USB adapter&#xA;that worked by simply running &lt;code&gt;man -k wireless&lt;/code&gt; and reading about the&#xA;USB entries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It didn&amp;rsquo;t have some of the applications I use regularly, so I started&#xA;reading about ports (intuitively, via &lt;code&gt;man ports&lt;/code&gt;!).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;The Test&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Shortly after selecting OpenBSD, I switched my ISP from Comcast to&#xA;Century Link. Early on I decided I would run my modem in &amp;ldquo;bridge&amp;rdquo;&#xA;mode, and have OpenBSD doing all the PPPoE stuff. To test my metal&#xA;(and OpenBSD&amp;rsquo;s) I was going to configure everything without consulting&#xA;the internet!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Armed with ONLY OpenBSD and its excellent documentation, I was able to&#xA;configure an OpenBSD router doing PPPoE, NAT, DNS and DHCP. All&#xA;without installing a single thing outside of the base OS (which, I&#xA;might add, was installed on a 2G CF card with room to spare!) and not&#xA;a single search engine query (no internet, remember? :P)!&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;FastForward to Now&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;OpenBSD is my main OS and the only OS I truly enjoy running. With&#xA;every release it gains new, awesome features that embody simplicity,&#xA;security, and consistency.&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Tue, 31 May 2016 16:04:05 -0600</pubDate>
    </item>
    <item>
      <title>On Shells and Static Paths</title>
      <link>https://deftly.net/posts/2016-04-26-on-shells-and-static-paths.html</link>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;In a previous post, I told people not to start their scripts with&#xA;&lt;code&gt;#!/bin/bash&lt;/code&gt;. In this post, I will explain in more detail why you&#xA;shouldn&amp;rsquo;t do this if you want your script to be portable!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Operating systems, they are neat, aren&amp;rsquo;t they? So much diversity, so&#xA;many options! Don&amp;rsquo;t like the shell that comes stock on your OS because&#xA;it doesn&amp;rsquo;t connect to the internet, download a list of packages that&#xA;&lt;em&gt;might&lt;/em&gt; be similar to a mistyped command you haphazardly pasted into&#xA;your terminal? Great, you can install one that does! So many options!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With all these options available to us, how can someone settle on a&#xA;single PATH to contain all this greatness? Why put &lt;code&gt;bash&lt;/code&gt; in &lt;code&gt;/bin&lt;/code&gt;?&#xA;Why not &lt;code&gt;/opt/fancy/oh-bash-my-face/bin&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Well.. lets not get crazy here&amp;hellip; That&amp;rsquo;s clearly a terrible location&#xA;for &lt;code&gt;bash&lt;/code&gt;, no way it&amp;rsquo;s standard!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Right!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Lets talk about a specific set of standards, &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/7990989775/index.html&#34;&gt;The Single UNIX®&#xA;Specification&lt;/a&gt;&#xA;and &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/&#34;&gt;POSIX IEEE Std 1003.1&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s true that not all Unixie operating systems conform to these&#xA;standards, but all of them implement enough to solve the problem of a&#xA;given shell not being installed in &lt;code&gt;/bin&lt;/code&gt;!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;The wisdom of The Grey Ones&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Long ago, the Great Grey Ones knew that not everyone would put things&#xA;in &lt;code&gt;/bin&lt;/code&gt;. They also knew that for a script/binary to be usefull.. it&#xA;needed to be in your PATH environment variable! Because of this.. they&#xA;made statements like:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Applications should note that the standard PATH to the shell cannot&#xA;be assumed to be either /bin/sh or /usr/bin/sh, and should be&#xA;determined by interrogation of the PATH returned by getconf PATH,&#xA;ensuring that the returned pathname is an absolute pathname and not a&#xA;shell built-in.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Both POSIX and SUS define this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I know what you are thinking: &amp;ldquo;Surely this applies only to &lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;&#xA;is the new standard, &lt;code&gt;bash&lt;/code&gt; is everywhere! Anything that doesn&amp;rsquo;t have&#xA;&lt;code&gt;bash&lt;/code&gt; is old and therefore not used! My &lt;code&gt;bash&lt;/code&gt; is in &lt;code&gt;/bin/bash&lt;/code&gt; -&#xA;yours &lt;strong&gt;MUST&lt;/strong&gt; be as well!&amp;rdquo;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;No!&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;What if I told you, some systems like &lt;a href=&#34;http://openbsd.org&#34;&gt;OpenBSD&lt;/a&gt; and&#xA;&lt;a href=&#34;http://freebsd.org&#34;&gt;FreeBSD&lt;/a&gt; do things a little differently. They have&#xA;a clear distinction between &amp;ldquo;base&amp;rdquo; applications and applications that&#xA;are installed via their respective &lt;code&gt;ports&lt;/code&gt; systems.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For various reasons, things like &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; are not included in&#xA;&amp;ldquo;base&amp;rdquo;. This means they will be installed outside of the typical &amp;ldquo;/bin,&#xA;/usr/bin&amp;rdquo; directory structure. Which means when you put lines like:&#xA;&lt;code&gt;#!/bin/bash&lt;/code&gt; at the top of your script you are ensuring that your&#xA;script will not run on OpenBSD or FreeBSD (or any other system that has&#xA;&lt;code&gt;bash&lt;/code&gt; installed somewhere else)!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Back to The Grey Ones&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;They planned for this! They gave us nifty tools that allow us to&#xA;invoke these these shells without knowing the explicit path for said&#xA;shell!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tools like &lt;code&gt;/usr/bin/env&lt;/code&gt; which:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;executes utility after modifying the environment as specified on the&#xA;command line.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Simply calling &lt;code&gt;env&lt;/code&gt; will spit out a list of all your currently set&#xA;variables! These vars get passed to &lt;code&gt;utility&lt;/code&gt; when you execute&#xA;something like &lt;code&gt;env bash&lt;/code&gt; (where &lt;code&gt;bash&lt;/code&gt; is the utility).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This means if we have our scripts execute &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt; as the&#xA;first line of our script, the PATH variable will be set to something&#xA;that is more likely to contain &lt;code&gt;bash&lt;/code&gt; than an explicit declaration&#xA;like &lt;code&gt;/bin/bash&lt;/code&gt; which, as we learned, doesn&amp;rsquo;t exist on some systems!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Conclusion&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Don&amp;rsquo;t be &lt;strong&gt;&lt;em&gt;that guy&lt;/em&gt;&lt;/strong&gt;. If your script is meant to run on a variety&#xA;of systems, follow the advice of The Grey Ones, use something like&#xA;&lt;code&gt;env&lt;/code&gt; to make your scripts portable. I have yet to see a *NIX OS that&#xA;lacks &lt;code&gt;/usr/bin/env&lt;/code&gt;. This includes things like True64.&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>pledge(2)&#39;ing Xmonad</title>
      <link>https://deftly.net/posts/2016-03-06-pledge-xmonad.html</link>
      <description>&lt;h2&gt;Background&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For those that don&amp;rsquo;t know, &lt;a href=&#34;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/pledge.2?query=pledge&amp;amp;arch=i386&#34;&gt;pledge(2)&lt;/a&gt; is an OpenBSD specific feature that allows applications to &amp;ldquo;promise&amp;rdquo; to use a subset of system calls. If an app has promised to only use, say, &lt;code&gt;rpath&lt;/code&gt; (obviously this is a contrived example) it would only be allowed to run this subset of system calls: &lt;code&gt;chdir(2)&lt;/code&gt;, &lt;code&gt;getcwd(3)&lt;/code&gt;, &lt;code&gt;openat(2)&lt;/code&gt;, &lt;code&gt;fstatat(2)&lt;/code&gt;, &lt;code&gt;faccessat(2)&lt;/code&gt;, &lt;code&gt;readlinkat(2)&lt;/code&gt;, &lt;code&gt;lstat(2)&lt;/code&gt;, &lt;code&gt;chmod(2)&lt;/code&gt;, &lt;code&gt;fchmod(2)&lt;/code&gt;, &lt;code&gt;fchmodat(2)&lt;/code&gt;, &lt;code&gt;chflags(2)&lt;/code&gt;, &lt;code&gt;chflagsat(2)&lt;/code&gt;, &lt;code&gt;chown(2)&lt;/code&gt;, &lt;code&gt;fchown(2)&lt;/code&gt;, &lt;code&gt;fchownat(2)&lt;/code&gt;, &lt;code&gt;fstat(2)&lt;/code&gt;, &lt;code&gt;getfsstat(2)&lt;/code&gt;. If the app tries to access a system call other than these, the kernel will kill the app with a SIGABRT.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since the addition of pledge(2) a handful of OpenBSD ports (including ghc) have added support for it! This means we can use pledge(2) in haskell apps like Xmonad!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you pledge an app, you need to read through and understand what it is doing so that you can properly set the promises it will use. In larger apps you can make successive calls to pledge(2) from various parts of the app, this allows you to conditionally ratchet down the required promises.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, you could make an initial loose pledge of &lt;code&gt;stdio rpath wpath cpath proc exec unix&lt;/code&gt;, then later remove a few calls like so: &lt;code&gt;stdio rpath wpath cpath unix&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The second set of promises listed above is a fairly bad example in this case, as window managers will need &lt;code&gt;proc&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; to start new programs.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Hello Pledge!&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Lets write an extremely limited app that can only make calls from the &lt;code&gt;stdio&lt;/code&gt; set.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import System.OpenBSD.Process ( pledge )&#xA;&#xA;main = do&#xA;    _ &amp;lt;- pledge &amp;quot;stdio&amp;quot; Nothing&#xA;    putStrLn &amp;quot;Hello, World!&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a test, you can run with &lt;code&gt;tty&lt;/code&gt; specified instead of &lt;code&gt;stdio&lt;/code&gt;. ghc will be able to build the binary, but upon execution you will see something like following in dmesg:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hello(21115): syscall 92 &amp;quot;stdio&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Pledged Xmonad&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Finally on to Xmonad! Here is an extremely basic example of a &lt;code&gt;xmonad.hs&lt;/code&gt; file you could use.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import XMonad&#xA;import System.IO&#xA;import System.OpenBSD.Process ( pledge )&#xA;&#xA;main = do&#xA;    _ &amp;lt;- pledge &amp;quot;stdio rpath proc exec unix&amp;quot; Nothing&#xA;    xmonad $ defaultConfig&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sun, 06 Mar 2016 12:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Experiments in Wood Carving</title>
      <link>https://deftly.net/posts/2016-01-23-wood-carving-experiment-one.html</link>
      <description>&lt;h1&gt;Ceder Beard Comb!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/images/wood-beardcomb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First attempt at a beard comb made of wood! Found it very easy to carve compared to bone!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s a little rough around the edges.. I need to figure out a good way to make the teeth a bit more even!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sat, 23 Jan 2016 12:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Manual import of repos into Gogs</title>
      <link>https://deftly.net/posts/2015-12-31-gogs-manual-import-of-big-repo.html</link>
      <description>&lt;p&gt;Recently I used setup a &lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; instance and attempted to pull in some very large&#xA;repositories (OpenBSD source tree). In doing so, I reached a timeout issue during the clone operation.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    if err = git.Clone(opts.RemoteAddr, repoPath, git.CloneRepoOptions{&#xA;            Mirror:  true,&#xA;            Quiet:   true,&#xA;            Timeout: 10 * time.Minute,&#xA;    }); err != nil {&#xA;            return repo, fmt.Errorf(&amp;quot;Clone: %v&amp;quot;, err)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The 10 minute timeout listed above was being hit. And updating the code to a larger timeout caused some new issues. So I had to make a workaround!&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Step 1&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Become the git user:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;su - git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;Step 2&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Now clone the repo into your desired user&amp;rsquo;s repo directory. In my case, this was to be a mirror, so pass that option to git-clone(1):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone --mirror git@sourceurl/repo.git ~/gogs-repositories/qbit/openbsd-src.git/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;Step 3&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Now we need to tell the Gogs db about the repo:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sqlite3 ./go/src/github.com/gogits/gogs/data/gogs.db&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;insert into repository (&#xA;    owner_id,&#xA;    lower_name,&#xA;    name,&#xA;    description,&#xA;    website,&#xA;    default_branch,&#xA;    num_watches,&#xA;    num_stars,&#xA;    num_forks,&#xA;    num_issues,&#xA;    num_closed_issues,&#xA;    num_pulls,&#xA;    num_closed_pulls,&#xA;    num_milestones,&#xA;    num_closed_milestones,&#xA;    is_private,&#xA;    is_bare,&#xA;    is_mirror,&#xA;    is_fork,&#xA;    created,&#xA;    updated,&#xA;    enable_wiki,&#xA;    enable_external_wiki,&#xA;    enable_issues,&#xA;    enable_external_tracker,&#xA;    enable_pulls&#xA;) values (&#xA;    1,&#xA;    &#39;openbsd-src&#39;,&#xA;    &#39;openbsd-src&#39;,&#xA;    &#39;Mirror of sthen@s anoncvs repo&#39;,&#xA;    &#39;&#39;,&#xA;    &#39;master&#39;,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    1,&#xA;    0,&#xA;    datetime(&#39;now&#39;),&#xA;    datetime(&#39;now&#39;),&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0,&#xA;    0&#xA;);&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Obviously you will need to change the strings and &lt;code&gt;owner_id&lt;/code&gt; to those that correspond to your repo&amp;rsquo;s information. Owner ID can be queried from the &lt;code&gt;user&lt;/code&gt; table.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;Step 4&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Now we need to tell Gogs about our repository mirror relation. To do this, you will need the ID of the repository you just created. This can be acquired by running a select on the &lt;code&gt;repository&lt;/code&gt; table: &lt;code&gt;select * from repository&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next update the mirror table:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;insert into mirror (repo_id, interval) values (40, 2);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Thu, 31 Dec 2015 12:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Setting up networking on OpenBSD hosted VMs</title>
      <link>https://deftly.net/posts/2015-11-14-openbsd-vm-networking.html</link>
      <description>&lt;p&gt;With OpenBSD getting a &lt;a href=&#34;http://undeadly.org/cgi?action=article&amp;amp;sid=20151101223132&#34;&gt;native hypervisor&lt;/a&gt;, I figured I would quickly describe my setup for allowing the VMs to access network resources!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This setup is using NAT and IP forwarding.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First thing, enable forwarding:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;doas echo &amp;quot;net.inet.ip.forwarding=1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf &#xA;# Only run the above if you want this all to start at boot&#xA;sysctl net.inet.ip.forwarding=1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next we need to configure a &lt;a href=&#34;http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man4/tap.4?query=tap&#34;&gt;tap&lt;/a&gt; interface at &lt;code&gt;tap0&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;cat /etc/hostname.tap0&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;inet 10.10.10.1 255.255.255.0&#xA;up&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now tell &lt;code&gt;pf&lt;/code&gt; what to do with the packets coming from the &lt;code&gt;tap0&lt;/code&gt; interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;match out on $ext_if inet from tap0:network nat-to ($ext_if)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;At this point, you could just manually assign ips to your VMs when booting / installing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For a bit more automation, we can run &lt;code&gt;dhcpd&lt;/code&gt; on the &lt;code&gt;tap0&lt;/code&gt; interface:&#xA;&lt;code&gt;cat /etc/dhcpd.conf&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;option  domain-name &amp;quot;vm.bolddaemon&amp;quot;;&#xA;option  domain-name-servers 8.8.8.8, 8.8.4.4;&#xA;&#xA;subnet 10.10.10.0 netmask 255.255.255.0 {&#xA;    option routers 10.10.10.1;&#xA;    range 10.10.10.5 10.10.10.30;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Pretty nifty, and all of it is in base (on amd64 and i386)!!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sat, 14 Nov 2015 12:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Experiments in Bone Carving - Hei matau</title>
      <link>https://deftly.net/posts/2015-03-21-fish-hook.html</link>
      <description>&lt;p&gt;Round two in my experiments with bone carving is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hei_matau&#34;&gt;Hei matau&lt;/a&gt; - a stylised fish hook from Māori legend. I still have quite a bit of finishing to do, but the general shape is complete!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The bone I used (part of a femur) to create this piece is much more suitable to carving than the &lt;a href=&#34;/posts/2015-03-08-bone-carving-experiment-one.html&#34;&gt;rib bone&lt;/a&gt; I had previously used in for the beard comb. It is extremely strong!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The next steps are to finish off the edging and polish!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/images/bone-front.jpg&#34; alt=&#34;Front&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/images/bone-back.jpg&#34; alt=&#34;Back&#34; /&gt;&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sat, 21 Mar 2015 13:00:00 -0600</pubDate>
    </item>
    <item>
      <title>Experiments in Coffee Roasting</title>
      <link>https://deftly.net/posts/2015-03-15-coffee-roast.html</link>
      <description>&lt;h1&gt;Etgiopia Yirga Cheffe Kore Kochoer &amp;amp; Brazil Pulp Natural Fazenda do Sertao&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Beans&lt;/strong&gt;: &lt;sup&gt;50&lt;/sup&gt;&amp;frasl;&lt;sub&gt;50&lt;/sub&gt; of each. (Batch of 100g)&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;First Crack&lt;/strong&gt;: Ooops&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Second Crack&lt;/strong&gt;: Ooops&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Total Roast Time&lt;/strong&gt;: Ooops&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;img src=&#34;/images/coffee_r_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Crack&lt;/strong&gt;: 2:35&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Second Crack&lt;/strong&gt;: 4:00&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Total Roast Time&lt;/strong&gt;: 4:55&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;img src=&#34;/images/coffee_r_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Crack&lt;/strong&gt;: 2:08&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Second Crack&lt;/strong&gt;: 3:54&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Total Roast Time&lt;/strong&gt;: 4:34&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;&lt;img src=&#34;/images/coffee_r_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sun, 15 Mar 2015 13:00:00 -0600</pubDate>
    </item>
    <item>
      <title>Experiments in Bone Carving - part one</title>
      <link>https://deftly.net/posts/2015-03-08-bone-carving-experiment-one.html</link>
      <description>&lt;h1&gt;Beard Comb - first attempt!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/images/bone-beardcomb1.jpg&#34; alt=&#34;Beard Comb&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have been interested in bone carving for some time now, but it hasn&amp;rsquo;t been&#xA;until recently that I have actually started doing it! It is proving to be a&#xA;fun and challenging hobby!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Today&amp;rsquo;s project was a Beard Comb carved from a rib bone! In hind sight, rib might&#xA;not have been the best choice for this particular project. The bone is very strong&#xA;length wise, as that is the direction of the &amp;ldquo;grain&amp;rdquo;. This makes for weak teeth.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some other valuable lessons I learned while undertaking this are:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use of a jig is very important.&lt;/li&gt;&#xA;&lt;li&gt;Remove all material to form the shape of your project prior to diving into&#xA;aspects like the teeth of the comb.&lt;/li&gt;&#xA;&lt;li&gt;Pick the right bone for the job.&lt;/li&gt;&#xA;&lt;li&gt;Pencil rubs off fast.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;While I was able to &amp;ldquo;finish&amp;rdquo; the comb, it isn&amp;rsquo;t very useful. I broke off three&#xA;teeth while cutting them out (torqued the saw just a bit when taking it out of the&#xA;slot). The teeth are also too thick which prevents the comb from actually being used.&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Sun, 08 Mar 2015 13:00:00 -0600</pubDate>
    </item>
    <item>
      <title>Revisiting the PicoLCD 256x64</title>
      <link>https://deftly.net/posts/2014-03-20-re-picolcd.html</link>
      <description>&lt;p&gt;&lt;img src=&#34;/images/banner1.gif&#34; alt=&#34;OpenBSD Banner&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Today marks my first commits (&lt;a href=&#34;http://www.openbsd.org/cgi-bin/cvsweb/src/sys/dev/usb/usbdevs.diff?r1=1.626;r2=1.627;f=h&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://www.openbsd.org/cgi-bin/cvsweb/src/sys/dev/usb/usbdevs.h.diff?r1=1.638;r2=1.639;f=h&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://www.openbsd.org/cgi-bin/cvsweb/src/sys/dev/usb/usb_quirks.c.diff?r1=1.72;r2=1.73;f=h&#34;&gt;3&lt;/a&gt;) to the OpenBSD &lt;code&gt;src&lt;/code&gt; tree (up until now it has all bee in &lt;code&gt;ports&lt;/code&gt; and one in &lt;code&gt;www&lt;/code&gt;)!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;add USB_PRODUCT_ITUNER_USBLCD256x64 as UQ_BAD_HID so libusb can talk via&#xA;interrupt transfers&#xA;&#xA;OK sthen@&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The last commit makes the PicoLCD 256x64 not attach as a &lt;code&gt;HID&lt;/code&gt;, so that it can be used by applications that talk to usb devices with &lt;code&gt;libusb&lt;/code&gt;!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The next step is to finish up the lcdproc driver for it - currently I can only turn on or of the backlight and +,- the contrast!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Thu, 20 Mar 2014 13:00:00 -0600</pubDate>
    </item>
    <item>
      <title>Hey Kid, I&#39;ma Interpreter!! Stop all the static interpreter referenci&#39;n!</title>
      <link>https://deftly.net/posts/2014-03-17-stop-all-the-ref.html</link>
      <description>&lt;p&gt;If you have ever explicitly set the path of an interpreter at the top of a script.. This post is about you.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;STOP IT!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Not every system has binaries in the same location!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The above might &lt;em&gt;seem&lt;/em&gt; awesome, and it might be tempting to use it, but if you do, and your project is something that I am interested in, you will receive a pull request (&lt;a href=&#34;https://github.com/JuliaLang/julia/pull/5493&#34;&gt;here&lt;/a&gt; are &lt;a href=&#34;https://github.com/nitrogen/nitrogen/pull/67&#34;&gt;some examples&lt;/a&gt;) to change it to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;On OpenBSD, bash is not in base, meaning it is not installed in &lt;code&gt;/bin&lt;/code&gt; or even &lt;code&gt;/usr/bin&lt;/code&gt;.  It gets plopped right into &lt;code&gt;/usr/local/bin&lt;/code&gt;. Almost all users will have &lt;code&gt;/usr/local/bin&lt;/code&gt; set in their &lt;code&gt;PATH&lt;/code&gt; variable, so use the above and do not be a turdburgler!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Mon, 17 Mar 2014 13:00:00 -0600</pubDate>
    </item>
    <item>
      <title>Using a picoLCD 256×64 on OpenBSD 4.7</title>
      <link>https://deftly.net/posts/2012-01-12-picolcd-openbsd.html</link>
      <description>&lt;p&gt;The first thing you will notice if you connect your fancy picoLCD 256×64 to your OpenBSD box, is that it shows up as a Human Interface Device.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately libusb doesn’t know what to do with devices on bsd systems that are NOT using the &lt;strong&gt;ugen&lt;/strong&gt; driver:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; 464     if (strncmp(di.udi_devnames[0], &amp;quot;ugen&amp;quot;, 4) != 0)&#xA; 465       /* best not to play with things we don&#39;t understand */&#xA; 466       continue;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Fine libusb!  We will have to come up with another way to use this screen!  OR!  We could tell OpenBSD to use ugen when ever it sees the lcd! :D&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To do that – you need the the OpenBSD source, knowledge of how to build Open’s kernel, and my patch!  Getting the source is beyond the scope of this little post.. so you will have to rtfm that action.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;cd to the usb source directory: cd /usr/src/sys/dev/usb&lt;/li&gt;&#xA;&lt;li&gt;Download the patch ( md5: 85e7498826635c612ede672f5e295e7a ): &lt;a href=&#34;http://qbit.devio.us/picoLCD256x64.patch&#34;&gt;picoLCD256x64.patch&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Apply said patch: patch -p1 &amp;lt; picoLCD256x64.patch&lt;/li&gt;&#xA;&lt;li&gt;pkg_add libusb&lt;/li&gt;&#xA;&lt;li&gt;Compile your kernel, install and reboot!&lt;/li&gt;&#xA;&lt;li&gt;Once you are running your freshly compiled kernel, download the lcd4linux-256×64 source from &lt;a href=&#34;http://picolcd.com/drivers/&#34;&gt;http://picolcd.com/drivers/&lt;/a&gt; .  Apply this patch ( md5: 3852103e3e5a13a3cd6b0c49389688f6 ): &lt;a href=&#34;http://qbit.devio.us/lcd4linux-256x64.patch&#34;&gt;lcd4linux-256×64.patch&lt;/a&gt;, compile ( You will have to play around with the plugins as some of them use linux’s proc fs and are not compatible with OpenBSD ).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Now check out the sample config files and have fun!&lt;/p&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Thu, 12 Jan 2012 12:00:00 -0700</pubDate>
    </item>
    <item>
      <title>Using VIM to make erlang pretty</title>
      <link>https://deftly.net/posts/2010-03-12-vi-pretty-erlang.html</link>
      <description>&lt;p&gt;I recently read an article ( Which no longer exists  ) talking about purtifying erlang. This inspired me to create a quick function in vim to do this for me!&#xA;Here it is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function! ErlPretty()&#xA;    silent !erl -noshell -eval &#39;erl_tidy:file(&amp;quot;%&amp;quot;,[verbose]).&#39; -s erlang halt&#xA;endfunction&#xA;nmap ep :execute ErlPretty()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Fri, 12 Mar 2010 12:15:00 -0700</pubDate>
    </item>
    <item>
      <title>Concurrent Hello with Erlang</title>
      <link>https://deftly.net/posts/2010-03-12-concurrent-hello.html</link>
      <description>&lt;p&gt;I recently picked up a copy of Joe Armstrong’s superb Programming Erlang book ( from the folks @ pragprog.com ). While reading the chapter on concurrent programming I was completely stumped by one of the examples. It basically creates a “server” and “client” and allows for message passing between the two. I found it very difficult to follow the passing of messages from a to b, and back.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Enter &lt;code&gt;chello.erl&lt;/code&gt;! I created a slightly modified version of Joe’s example that uses some &lt;code&gt;io:format&lt;/code&gt; to tell you what’s going on. Hope someone finds this useful.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code class=&#34;language-erlang&#34;&gt;-module (chello).&#xA;-export ([loop/0, rpc/2]).&#xA;&#xA;rpc(Pid, Request) -&amp;gt;&#xA;    io:format(&amp;quot;rpc[~p]  sending ~p to ~p~n&amp;quot;, [self(), Request, Pid]),&#xA;    Pid ! {self(), Request},&#xA;    receive&#xA;        Response -&amp;gt;&#xA;            io:format(&amp;quot;rpc[~p]  responding with : ~p~n&amp;quot;, [self(), Response]),&#xA;            {Pid,Response}&#xA;    end.&#xA;&#xA;loop() -&amp;gt;&#xA;receive&#xA;    {From, {hello}} -&amp;gt;&#xA;        io:format(&amp;quot;loop[~p] received info from: ~p~n&amp;quot;, [self(), From]),&#xA;        From ! {self(), &amp;quot;Hello&amp;quot;},&#xA;        loop();&#xA;    {From, {goodbye}} -&amp;gt;&#xA;        io:format(&amp;quot;loop[~p] received info from: ~p~n&amp;quot;, [self(), From]),&#xA;        From ! {self(),&amp;quot;Goodbye&amp;quot;},&#xA;        loop();&#xA;    {From, Other} -&amp;gt;&#xA;        io:format(&amp;quot;loop[~p] received info from: ~p~n&amp;quot;, [self, From]),&#xA;        From ! {self(),{error, Other}},&#xA;        loop()&#xA;    end.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Run from the erl shell with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1&amp;gt; Pid = spawn(fun chello:loop/0).&#xA;&#xA;&amp;lt;0.38.0&amp;gt;&#xA;&#xA;2&amp;gt; chello:rpc(Pid, {hello}).&#xA;rpc[&amp;lt;0.31.0&amp;gt;] sending {hello} to &amp;lt;0.38.0&amp;gt;&#xA;&#xA;loop[&amp;lt;0.38.0&amp;gt;] received info from: &amp;lt;0.31.0&amp;gt;&#xA;&#xA;rpc[&amp;lt;0.31.0&amp;gt;] responding with : {&amp;lt;0.38.0&amp;gt;,”Hello”}&#xA;&#xA;{&amp;lt;0.38.0&amp;gt;,{&amp;lt;0.38.0&amp;gt;,”Hello”}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
      <author>Aaron Bieber</author>
      <pubDate>Fri, 12 Mar 2010 12:01:00 -0700</pubDate>
    </item>
  </channel>
</rss>